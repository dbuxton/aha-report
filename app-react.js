// Generated by CoffeeScript 1.8.0
(function() {
  var AhaReport, AuthenticateControl, CardColumn, FeatureCard, SelectUserControl, redirectUri;

  if (window.location.href.indexOf('localtunnel') !== -1) {
    redirectUri = 'https://lmlqqbztpm.localtunnel.me/';
  } else {
    redirectUri = 'https://dbuxton.github.io/aha-report/';
  }

  AhaReport = React.createClass({
    doneFeatures: [],
    notDoneFeatures: [],
    getInitialState: function() {
      return {
        subdomain: "arachnys"
      };
    },
    render: function() {
      var loadStatus;
      if (this.state.featuresLoaded !== this.state.numFeatures) {
        if (isNaN(this.state.numFeatures)) {
          loadStatus = React.createElement("div", {
            "className": "col-xs-12"
          }, "Initialising...");
        } else {
          loadStatus = React.createElement("div", {
            "className": "col-xs-12"
          }, "Loaded feature ", this.state.featuresLoaded, " out of ", this.state.numFeatures);
        }
      } else {
        loadStatus = React.createElement(SelectUserControl, {
          "users": this.state.users,
          "onUserSelect": this.handleUserSelect
        });
      }
      return React.createElement("div", {
        "className": "row"
      }, React.createElement("div", {
        "className": "col-xs-12"
      }, React.createElement("h3", null, "Aha report")), React.createElement(AuthenticateControl, {
        "subdomain": this.state.subdomain,
        "onAuthenticate": this.handleAuthenticated,
        "authenticated": this.state.authenticated,
        "onSubdomainChange": this.handleSubdomainChange
      }), React.createElement("div", {
        "className": "col-xs-12"
      }, React.createElement("div", {
        "className": "row"
      }, loadStatus), React.createElement("div", {
        "className": "row"
      }, React.createElement(CardColumn, {
        "title": "Done",
        "authenticated": this.state.authenticated,
        "cards": this.doneFeatures
      }), React.createElement(CardColumn, {
        "title": "Not done",
        "authenticated": this.state.authenticated,
        "cards": this.notDoneFeatures
      }))));
    },
    handleAuthenticated: function(api) {
      var productKey;
      this.setState({
        authenticated: true,
        numFeatures: NaN,
        featuresLoaded: 0
      });
      productKey = "APP";
      return api.get("/products/" + productKey + "/users", {}, (function(_this) {
        return function(response) {
          var u, users, _i, _len, _ref;
          users = [];
          _ref = response.project_users;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            u = _ref[_i];
            users.push(u.user);
          }
          _this.setState({
            users: users
          });
          return api.get("/products/" + productKey + "/features", {
            per_page: 300,
            updated_since: Date.parse('t - 7d')
          }, function(response) {
            var feature, i, _j, _len1, _ref1, _results;
            _this.featuresHash = {};
            _this.setState({
              numFeatures: response.features.length
            });
            i = 0;
            _ref1 = response.features;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              feature = _ref1[_j];
              _results.push(api.get("/features/" + feature.reference_num, {}, function(response) {
                i++;
                _this.setState({
                  featuresLoaded: i
                });
                if (response.feature.assigned_to_user) {
                  if (!_this.featuresHash[response.feature.assigned_to_user.id]) {
                    _this.featuresHash[response.feature.assigned_to_user.id] = [];
                  }
                  return _this.featuresHash[response.feature.assigned_to_user.id].push(response.feature);
                }
              }));
            }
            return _results;
          });
        };
      })(this));
    },
    handleSubdomainChange: function(subdomain) {
      return this.setState({
        subdomain: subdomain
      });
    },
    handleUserSelect: function(selection) {
      var feature, _i, _len, _ref;
      this.doneFeatures = [];
      this.notDoneFeatures = [];
      if (this.featuresHash[selection]) {
        _ref = this.featuresHash[selection];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          feature = _ref[_i];
          if (feature.workflow_status.name === "Complete" || feature.workflow_status.name === "On production") {
            this.doneFeatures.push(feature);
          } else {
            this.notDoneFeatures.push(feature);
          }
        }
      }
      return this.setState({
        selectedUser: selection,
        doneFeatures: this.doneFeatures,
        notDoneFeatures: this.notDoneFeatures
      });
    }
  });

  AuthenticateControl = React.createClass({
    getInitialState: function() {
      return {
        text: this.props.subdomain
      };
    },
    handleChange: function() {
      return this.props.onSubdomainChange(this.refs.subdomainInput.getDOMNode().value);
    },
    handleSubmit: function(e) {
      e.preventDefault();
      return new AhaApi({
        accountDomain: this.state.text,
        clientId: '10218890e8290548ea28cc16d4bbb4e705bcf4f45a4a6cb8632d31cd27b51c78',
        redirectUri: redirectUri
      }).authenticate((function(_this) {
        return function(api, success, message) {
          return _this.props.onAuthenticate(api);
        };
      })(this));
    },
    render: function() {
      if (this.props.authenticated === true) {
        return React.createElement("div", null);
      } else {
        return React.createElement("div", {
          "className": "col-xs-12"
        }, React.createElement("div", {
          "className": "form"
        }, React.createElement("div", {
          "className": "form-group"
        }, React.createElement("label", {
          "for": "subdomain",
          "className": ""
        }, "Aha subdomain"), React.createElement("input", {
          "name": "subdomain",
          "className": "form-control",
          "onChange": this.handleChange,
          "defaultValue": this.state.text,
          "ref": "subdomainInput"
        })), React.createElement("div", {
          "className": "form-group"
        }, React.createElement("a", {
          "onClick": this.handleSubmit,
          "className": "btn btn-primary"
        }, "Authenticate"))));
      }
    }
  });

  CardColumn = React.createClass({
    render: function() {
      var cards, renderCard;
      if (!this.props.authenticated) {
        return React.createElement("div", null);
      }
      cards = [];
      renderCard = function(c) {
        return React.createElement("div", {
          "key": c.id
        }, React.createElement(FeatureCard, {
          "card": c
        }));
      };
      return React.createElement("div", {
        "className": "col-xs-6"
      }, React.createElement("h3", null, this.props.title), React.createElement("div", {
        "className": "row"
      }, React.createElement("div", {
        "className": "col-xs-12"
      }, this.props.cards.map(renderCard))));
    }
  });

  FeatureCard = React.createClass({
    render: function() {
      var cardCls, renderRequirement, requirements;
      if (this.props.card.workflow_status.name === "Complete" || this.props.card.workflow_status.name === "On production") {
        cardCls = "panel panel-success";
      } else {
        cardCls = "panel panel-default";
      }
      requirements = [];
      renderRequirement = function(r) {
        var cls;
        if (r.workflow_status.name === "Complete" || r.workflow_status.name === "On production") {
          cls = "list-group-item list-group-item-success";
        } else if (r.workflow_status.name === "Rejected") {
          cls = "list-group-item list-group-item-danger";
        } else {
          cls = "list-group-item";
        }
        return React.createElement("a", {
          "href": r.url,
          "target": "_blank"
        }, React.createElement("li", {
          "className": cls
        }, React.createElement("strong", null, r.workflow_status.name), " | ", r.reference_num, " | ", r.name));
      };
      return React.createElement("div", {
        "className": cardCls
      }, React.createElement("div", {
        "className": "panel-heading"
      }, React.createElement("h3", {
        "className": "panel-title"
      }, React.createElement("a", {
        "href": this.props.card.url,
        "target": "_blank"
      }, this.props.card.reference_num, " | ", this.props.card.name))), React.createElement("ul", {
        "className": "list-group"
      }, this.props.card.requirements.map(renderRequirement)));
    }
  });

  SelectUserControl = React.createClass({
    handleChange: function(e) {
      return this.props.onUserSelect(this.refs.userSelect.getDOMNode().value);
    },
    render: function() {
      var option, options, _i, _len, _ref;
      if (!this.props.users) {
        return React.createElement("div", null);
      } else {
        options = [];
        _ref = this.props.users;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          options.push(React.createElement("option", {
            "value": option.id
          }, option.name));
        }
        return React.createElement("div", {
          "className": "col-xs-12"
        }, React.createElement("select", {
          "className": "form-control",
          "onChange": this.handleChange,
          "ref": "userSelect"
        }, React.createElement("option", null, "Choose user..."), options));
      }
    }
  });

  React.render(React.createElement(AhaReport, null), document.getElementById('app'));

}).call(this);
